import pandas as pd

from django.db.utils import IntegrityError

from diffusion.models import Award, MetaAward
from utils.kart_tools import safeGet
from utils.artist_utils import getArtistByNames

from people.models import Artist
from production.models import Event

import logging
# Logging
logger = logging.getLogger('diffusion')
logger.setLevel(logging.DEBUG)
# clear the logs
open('awards.log', 'w').close()
# create file handler which logs even debug messages
fh = logging.FileHandler('awards.log')
fh.setLevel(logging.DEBUG)
# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
# create formatter and add it to the handlers
formatter1 = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter1)
formatter2 = logging.Formatter('%(message)s')
ch.setFormatter(formatter2)
# add the handlers to the logger
logger.addHandler(fh)
logger.addHandler(ch)
#####



def createAwards(dry_run = False, DEBUG = True):
    """Create the awards listed in csv in Kart

    """
    print("Create AWARDS")
    # Load the events associated to places and artworks (generated by createPlaces())
    awards = pd.read_csv("./tmp/merge_events_places.csv")

    # Load the artists and associated artworks (generated by artworkCleaning())
    authors = pd.read_csv("./tmp/artworks_artists.csv")

    # Merge all the data in a dataframe
    total_df = pd.merge(awards, authors, how='left')
    # Create a note column
    total_df["notes"] = ""

    # Replace empty values with ''
    total_df.fillna('', inplace=True)

    # Awards counter
    cpt = 0

    # Check if artists info are complete
    # if no artist_id, search by name in db
    for id, row in total_df[total_df['artist_id'] == ''].iterrows():
        art = getArtistByNames(firstname=row['artist_firstname'], lastname=row['artist_lastname'], listing=False)
        # if there is a match
        # dist == 2 is the maximum score for artist matching
        if art and art['dist'] == 2:
            # the id is stored in df
            total_df.loc[id, "artist_id"] = art['artist'].id

    # Iterate through all validated rows
    for ind, award in total_df.iterrows():
        # init
        artwork_id = artist = False

        # Retrieve the award label
        label = award.meta_award_label

        # Retrieve the event id
        event_id = int(award.event_id)

        # An artwork id is required to create the award
        if (award.artwork_id):
            artwork_id = int(award.artwork_id)
        else:
            logger.warning(f"No idartwork for {award.artwork_title}")
            continue

        if (award.artist_id):
            artist = Artist.objects.get(pk=int(award.artist_id))
        else:
            cpt += 1
            print("NO ID ARTIST ", label, event_id)

        # try:
        #     print("award.artist_id",int(award.artist_id))
        # except ValueError:
        #     print("------------------>", award.artist_id)
        note = award.meta_award_label_details

        description = award.meta_award_label_details
        if pd.isna(award.meta_award_label_details):
            description = ''

        # GET THE META-eventsToCreate
        # Retrieve the Kart title of the event
        event, filt = safeGet(Event, pk=event_id)
        mevent, filt = safeGet(Event, title=event.title, main_event=True)

        # GET OR CREATE THE META-AWARD
        # Check if award exists in Kart, otherwise creates it
        maward, filt = safeGet(MetaAward, label=f"{label}", event=mevent.id)

        if maward:
            logger.info(f"MetaAward {label} exist in Kart")
        else:
            maward = MetaAward(
                label=f"{label}",
                event=mevent,
                description=description,
                type="INDIVIDUAL"  # indivudal by default, no related info in csv
            )
            print(f"label {maward.label}, event {mevent}, description {description}")
            if not dry_run:
                maward.save()
            logger.info(f"\"{maward}\" created ")

        # GET OR CREATE THE AWARDS
        new_aw, filt = safeGet(Award,
                               meta_award=maward.id,
                               artwork=artwork_id,
                               event=event.id,
                               # artists = artist_id
                               )
        logger.setLevel(logging.WARNING)
        if new_aw:
            logger.info(f"{new_aw} exist in Kart")
            try:
                new_aw.artist.add(artist.id)
            except IntegrityError:
                # logger.warning(f"Artist_id: {artist} caused an IntegrityError")
                pass
            except AttributeError:
                # logger.warning(f"Artist_id: {artist} caused an AttributeError")
                pass
            if not dry_run:
                new_aw.save()
        else:
            new_aw = Award(
                meta_award=maward,
                event=event,
                date=event.starting_date,
                note=note
            )
            try:
                if not dry_run:
                    new_aw.save()
                    new_aw.artwork.add(artwork_id)
                    new_aw.save()
                    print(f"{new_aw}  created")
            except ValueError:
                logger.warning(f"Artist_id: {artist} caused an IntegrityError")
                pass
